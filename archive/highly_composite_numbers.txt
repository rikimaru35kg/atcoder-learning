  1: N=                  1, len= 1, cnt=     1
  2: N=                  2, len= 1, cnt=     2
  3: N=                  4, len= 1, cnt=     3
  4: N=                  6, len= 1, cnt=     4
  5: N=                 12, len= 2, cnt=     6
  6: N=                 24, len= 2, cnt=     8
  7: N=                 36, len= 2, cnt=     9
  8: N=                 48, len= 2, cnt=    10
  9: N=                 60, len= 2, cnt=    12
 10: N=                120, len= 3, cnt=    16
 11: N=                180, len= 3, cnt=    18
 12: N=                240, len= 3, cnt=    20
 13: N=                360, len= 3, cnt=    24
 14: N=                720, len= 3, cnt=    30
 15: N=                840, len= 3, cnt=    32
 16: N=               1260, len= 4, cnt=    36
 17: N=               1680, len= 4, cnt=    40
 18: N=               2520, len= 4, cnt=    48
 19: N=               5040, len= 4, cnt=    60
 20: N=               7560, len= 4, cnt=    64
 21: N=              10080, len= 5, cnt=    72
 22: N=              15120, len= 5, cnt=    80
 23: N=              20160, len= 5, cnt=    84
 24: N=              25200, len= 5, cnt=    90
 25: N=              27720, len= 5, cnt=    96
 26: N=              45360, len= 5, cnt=   100
 27: N=              50400, len= 5, cnt=   108
 28: N=              55440, len= 5, cnt=   120
 29: N=              83160, len= 5, cnt=   128
 30: N=             110880, len= 6, cnt=   144
 31: N=             166320, len= 6, cnt=   160
 32: N=             221760, len= 6, cnt=   168
 33: N=             277200, len= 6, cnt=   180
 34: N=             332640, len= 6, cnt=   192
 35: N=             498960, len= 6, cnt=   200
 36: N=             554400, len= 6, cnt=   216
 37: N=             665280, len= 6, cnt=   224
 38: N=             720720, len= 6, cnt=   240
 39: N=            1081080, len= 7, cnt=   256
 40: N=            1441440, len= 7, cnt=   288
 41: N=            2162160, len= 7, cnt=   320
 42: N=            2882880, len= 7, cnt=   336
 43: N=            3603600, len= 7, cnt=   360
 44: N=            4324320, len= 7, cnt=   384
 45: N=            6486480, len= 7, cnt=   400
 46: N=            7207200, len= 7, cnt=   432
 47: N=            8648640, len= 7, cnt=   448
 48: N=           10810800, len= 8, cnt=   480
 49: N=           14414400, len= 8, cnt=   504
 50: N=           17297280, len= 8, cnt=   512
 51: N=           21621600, len= 8, cnt=   576
 52: N=           32432400, len= 8, cnt=   600
 53: N=           36756720, len= 8, cnt=   640
 54: N=           43243200, len= 8, cnt=   672
 55: N=           61261200, len= 8, cnt=   720
 56: N=           73513440, len= 8, cnt=   768
 57: N=          110270160, len= 9, cnt=   800
 58: N=          122522400, len= 9, cnt=   864
 59: N=          147026880, len= 9, cnt=   896
 60: N=          183783600, len= 9, cnt=   960
 61: N=          245044800, len= 9, cnt=  1008
 62: N=          294053760, len= 9, cnt=  1024
 63: N=          367567200, len= 9, cnt=  1152
 64: N=          551350800, len= 9, cnt=  1200
 65: N=          698377680, len= 9, cnt=  1280
 66: N=          735134400, len= 9, cnt=  1344
 67: N=         1102701600, len=10, cnt=  1440
 68: N=         1396755360, len=10, cnt=  1536
 69: N=         2095133040, len=10, cnt=  1600
 70: N=         2205403200, len=10, cnt=  1680
 71: N=         2327925600, len=10, cnt=  1728
 72: N=         2793510720, len=10, cnt=  1792
 73: N=         3491888400, len=10, cnt=  1920
 74: N=         4655851200, len=10, cnt=  2016
 75: N=         5587021440, len=10, cnt=  2048
 76: N=         6983776800, len=10, cnt=  2304
 77: N=        10475665200, len=11, cnt=  2400
 78: N=        13967553600, len=11, cnt=  2688
 79: N=        20951330400, len=11, cnt=  2880
 80: N=        27935107200, len=11, cnt=  3072
 81: N=        41902660800, len=11, cnt=  3360
 82: N=        48886437600, len=11, cnt=  3456
 83: N=        64250746560, len=11, cnt=  3584
 84: N=        73329656400, len=11, cnt=  3600
 85: N=        80313433200, len=11, cnt=  3840
 86: N=        97772875200, len=11, cnt=  4032
 87: N=       128501493120, len=12, cnt=  4096
 88: N=       146659312800, len=12, cnt=  4320
 89: N=       160626866400, len=12, cnt=  4608
 90: N=       240940299600, len=12, cnt=  4800
 91: N=       293318625600, len=12, cnt=  5040
 92: N=       321253732800, len=12, cnt=  5376
 93: N=       481880599200, len=12, cnt=  5760
 94: N=       642507465600, len=12, cnt=  6144
 95: N=       963761198400, len=12, cnt=  6720
 96: N=      1124388064800, len=13, cnt=  6912
 97: N=      1606268664000, len=13, cnt=  7168
 98: N=      1686582097200, len=13, cnt=  7200
 99: N=      1927522396800, len=13, cnt=  7680
100: N=      2248776129600, len=13, cnt=  8064
101: N=      3212537328000, len=13, cnt=  8192
102: N=      3373164194400, len=13, cnt=  8640
103: N=      4497552259200, len=13, cnt=  9216
104: N=      6746328388800, len=13, cnt= 10080
105: N=      8995104518400, len=13, cnt= 10368
106: N=      9316358251200, len=13, cnt= 10752
107: N=     13492656777600, len=14, cnt= 11520
108: N=     18632716502400, len=14, cnt= 12288
109: N=     26985313555200, len=14, cnt= 12960
110: N=     27949074753600, len=14, cnt= 13440
111: N=     32607253879200, len=14, cnt= 13824
112: N=     46581791256000, len=14, cnt= 14336
113: N=     48910880818800, len=14, cnt= 14400
114: N=     55898149507200, len=14, cnt= 15360
115: N=     65214507758400, len=14, cnt= 16128
116: N=     93163582512000, len=14, cnt= 16384
117: N=     97821761637600, len=14, cnt= 17280
118: N=    130429015516800, len=15, cnt= 18432
119: N=    195643523275200, len=15, cnt= 20160
120: N=    260858031033600, len=15, cnt= 20736
121: N=    288807105787200, len=15, cnt= 21504
122: N=    391287046550400, len=15, cnt= 23040
123: N=    577614211574400, len=15, cnt= 24576
124: N=    782574093100800, len=15, cnt= 25920
125: N=    866421317361600, len=15, cnt= 26880
126: N=   1010824870255200, len=16, cnt= 27648
127: N=   1444035528936000, len=16, cnt= 28672
128: N=   1516237305382800, len=16, cnt= 28800
129: N=   1732842634723200, len=16, cnt= 30720
130: N=   2021649740510400, len=16, cnt= 32256
131: N=   2888071057872000, len=16, cnt= 32768
132: N=   3032474610765600, len=16, cnt= 34560
133: N=   4043299481020800, len=16, cnt= 36864
134: N=   6064949221531200, len=16, cnt= 40320
135: N=   8086598962041600, len=16, cnt= 41472
136: N=  10108248702552000, len=17, cnt= 43008
137: N=  12129898443062400, len=17, cnt= 46080
138: N=  18194847664593600, len=17, cnt= 48384
139: N=  20216497405104000, len=17, cnt= 49152
140: N=  24259796886124800, len=17, cnt= 51840
141: N=  30324746107656000, len=17, cnt= 53760
142: N=  36389695329187200, len=17, cnt= 55296
143: N=  48519593772249600, len=17, cnt= 57600
144: N=  60649492215312000, len=17, cnt= 61440
145: N=  72779390658374400, len=17, cnt= 62208
146: N=  74801040398884800, len=17, cnt= 64512
147: N= 106858629141264000, len=18, cnt= 65536
148: N= 112201560598327200, len=18, cnt= 69120
149: N= 149602080797769600, len=18, cnt= 73728
150: N= 224403121196654400, len=18, cnt= 80640
151: N= 299204161595539200, len=18, cnt= 82944
152: N= 374005201994424000, len=18, cnt= 86016
153: N= 448806242393308800, len=18, cnt= 92160
154: N= 673209363589963200, len=18, cnt= 96768
155: N= 748010403988848000, len=18, cnt= 98304
156: N= 897612484786617600, len=18, cnt=103680
157: N=1122015605983272000, len=19, cnt=107520
158: N=1346418727179926400, len=19, cnt=110592
159: N=1795224969573235200, len=19, cnt=115200
160: N=2244031211966544000, len=19, cnt=122880
161: N=2692837454359852800, len=19, cnt=124416
162: N=3066842656354276800, len=19, cnt=129024
163: N=4381203794791824000, len=19, cnt=131072
164: N=4488062423933088000, len=19, cnt=138240
165: N=6133685312708553600, len=19, cnt=147456
166: N=8976124847866176000, len=19, cnt=153600


// ### test.cpp ###
#include <bits/stdc++.h>
#ifdef __DEBUG_VECTOR
namespace for_debugging{
    struct subscript_and_location{
        int sub;
        std::source_location loc;
        subscript_and_location(int sub_,std::source_location loc_=std::source_location::current()){
            sub=sub_;
            loc=loc_;
        }
        void check_out_of_range(size_t sz){
            if(sub<0||(int)sz<=sub){
                std::clog << loc.file_name() << ":(" << loc.line() << ":" << loc.column() << "):" << loc.function_name() << std::endl;
                std::clog << "out of range: subscript = " << sub << ", vector_size = " << sz << std::endl;
                exit(EXIT_FAILURE);
            }
        }
    };
}
namespace std{
    template<class T,class Allocator=std::allocator<T>> class vector_for_debugging:public std::vector<T,Allocator>{
        using std::vector<T,Allocator>::vector;
        public:
            [[nodiscard]] constexpr std::vector<T,Allocator>::reference operator[](for_debugging::subscript_and_location n) noexcept(!std::is_same<T,bool>::value){
                n.check_out_of_range(this->size());
                return std::vector<T,Allocator>::operator[](n.sub);
            }
            [[nodiscard]] constexpr std::vector<T,Allocator>::const_reference operator[](for_debugging::subscript_and_location n) const noexcept(!std::is_same<T,bool>::value){
                n.check_out_of_range(this->size());
                return std::vector<T,Allocator>::operator[](n.sub);
            }
    };
    namespace pmr{
        template<class T> using vector_for_debugging=std::vector_for_debugging<T,std::pmr::polymorphic_allocator<T>>;
    }
}
#define vector vector_for_debugging
#endif
using namespace std;
using ll = long long;
using ull = unsigned long long;
using sll = __int128_t;
using db = double;
using Pr = pair<ll, ll>;
using Pd = pair<double, double>;
using vi = vector<int>;
using vs = vector<string>;
using vc = vector<char>;
using vl = vector<ll>;
using vb = vector<bool>;
using vd = vector<double>;
using vp = vector<Pr>;
using vpd = vector<Pd>;
using vvi = vector<vector<int>>;
using vvc = vector<vector<char>>;
using vvl = vector<vector<ll>>;
using vvp = vector<vector<Pr>>;
using vvb = vector<vector<bool>>;
using vvd = vector<vector<double>>;
using vvs = vector<vector<string>>;
using vvvi = vector<vector<vector<int>>>;
using vvvl = vector<vector<vector<ll>>>;
using vvvb = vector<vector<vector<bool>>>;
using vvvd = vector<vector<vector<double>>>;
using t3 = tuple<ll,ll,ll>;
using t3d = tuple<db,db,db>;
using t4 = tuple<ll,ll,ll,ll>;
using vt3 = vector<t3>;
using vt3d = vector<t3d>;
using vt4 = vector<t4>;
using vvt3 = vector<vector<t3>>;
using vvt3d = vector<vector<t3d>>;
using vvt4 = vector<vector<t4>>;
using pq = priority_queue<Pr,vector<Pr>,greater<Pr>>;
using cl = complex<ll>;
using cd = complex<double>;
#define rep(i, N) for (ll i=0; i<(ll)(N); ++i)
#define repr(i, N) for (ll i = (ll)(N) - 1; i >= 0; --i)
#define repk(i, k, N) for (ll i = k; i < (ll)(N); ++i)
#define rep1(i, N) for (ll i=1; i<(ll)(N+1); ++i)
#define rep1r(i, N) for (ll i=(ll)(N); i>0; i--)
#define all(v) (v).begin(), (v).end()
#define allr(v) (v).rbegin(), (v).rend()
#define SIZE(v) (ll)((v).size())
#define PYes {puts("Yes"); exit(0);}
#define PNo {puts("No"); exit(0);}
#define PFi {puts("First"); exit(0);}
#define PSe {puts("Second"); exit(0);}
#define Pm0 {puts("0"); exit(0);}
#define Pm1 {puts("-1"); exit(0);}
#define INT(...) int __VA_ARGS__; in(__VA_ARGS__)
#define INTM(...) int __VA_ARGS__; inm(__VA_ARGS__)
#define LONG(...) ll __VA_ARGS__; in(__VA_ARGS__)
#define LONGM(...) ll __VA_ARGS__; inm(__VA_ARGS__)
#define DOUBLE(...) double __VA_ARGS__; in(__VA_ARGS__)
#define CHAR(...) char __VA_ARGS__; in(__VA_ARGS__)
#define STRING(...) string __VA_ARGS__; in(__VA_ARGS__)
#define VI(ivec, n) vi ivec(n); input_ivec(ivec, n)
#define VIM(ivec, n) vi ivec(n); input_ivecm(ivec, n)
#define VL(lvec, n) vl lvec(n); input_lvec(lvec, n)
#define VLM(lvec, n) vl lvec(n); input_lvecm(lvec, n)
#define VL2(lvec1, lvec2, n) vl lvec1(n), lvec2(n); input_lvec12(lvec1, lvec2, n)
#define VL2M(lvec1, lvec2, n) vl lvec1(n), lvec2(n); input_lvec12m(lvec1, lvec2, n)
#define VC(cvec, n) vc cvec(n); input_cvec(cvec, n)
#define VS(svec, n) vs svec(n); input_svec(svec, n)
#define VD(dvec, n) vd dvec(n); input_dvec(dvec, n)
#define VP(pvec, n) vp pvec(n); input_pvec(pvec, n)
#define VPD(pvec, n) vpd pvec(n); input_pvecd(pvec, n)
#define VPM(pvec, n) vp pvec(n); input_pvecm(pvec, n)
#define VVI(ivec2, h, w) vvi ivec2(h, vi(w)); input_ivec2(ivec2, h, w)
#define VVL(lvec2, h, w) vvl lvec2(h, vl(w)); input_lvec2(lvec2, h, w)
#define VVLM(lvec2, h, w) vvl lvec2(h, vl(w)); input_lvec2m(lvec2, h, w)
#define VVC(cvec2, h, w) vvc cvec2(h, vc(w)); input_cvec2(cvec2, h, w)
#define pcnt(x) (ll)__builtin_popcountll(x)
#define parity(x) (ll)__builtin_parityll(x)
#define uset unordered_set
#define umap unordered_map
inline void Out(double x) {printf("%.15f",x);cout<<'\n';}
template<typename T> inline void Out(pair<T,T> x) {cout<<x.first<<' '<<x.second<<'\n';}
template<typename T> inline void Out(T x) {cout<<x<<'\n';}
inline void Out(vector<string> v) {rep(i,SIZE(v)) cout<<v[i]<<'\n';}
template<typename T> inline void Out(queue<T> q){while(!q.empty()) {cout<<q.front()<<" "; q.pop();} cout<<endl;}
template<typename T> inline void Out(deque<T> q){while(!q.empty()) {cout<<q.front()<<" "; q.pop_front();} cout<<endl;}
template<typename T> inline void Out(vector<T> v) {rep(i,SIZE(v)) cout<<v[i]<<(i==SIZE(v)-1?'\n':' ');}
template<typename T> inline void Out(vector<vector<T>> &vv){for(auto &v: vv) Out(v);}
template<typename T> inline void Out(vector<pair<T,T>> v) {for(auto p:v) Out(p);}
template<typename T> inline void Outend(T x) {Out(x); exit(0);}
template<typename T> inline void chmin(T &a, T b) { a = min(a, b); }
template<typename T> inline void chmax(T &a, T b) { a = max(a, b); }
inline void mi(void) {return;}
template<typename T1, typename... T2> void mi(T1& f, T2&... r) {--f; mi(r...);}
template<class... T> void in(T&... x) {(cin >> ... >> x);}
template<class... T> void inm(T&... x) {(cin >> ... >> x); mi(x...);}
inline void input_ivec(vi &ivec, int n) {rep(i, n) {cin>>ivec[i];}}
inline void input_ivecm(vi &ivec, int n) {rep(i, n) {cin>>ivec[i];--ivec[i];}}
inline void input_lvec(vl &lvec, ll n) {rep(i, n) {cin>>lvec[i];}}
inline void input_lvecm(vl &lvec, ll n) {rep(i, n) {cin>>lvec[i];--lvec[i];}}
inline void input_lvec12(vl &lvec1, vl &lvec2, ll n) {rep(i, n) {cin>>lvec1[i]>>lvec2[i];}}
inline void input_lvec12m(vl &lvec1, vl &lvec2, ll n) {rep(i, n) {cin>>lvec1[i]>>lvec2[i];--lvec1[i];--lvec2[i];}}
inline void input_cvec(vc &cvec, ll n) {rep (i, n) {cin>>cvec[i];}}
inline void input_svec(vs &svec, ll n) {rep (i, n) {cin>>svec[i];}}
inline void input_dvec(vd &dvec, ll n) {rep (i, n) {cin>>dvec[i];}}
inline void input_pvec(vp &pvec, ll n) {rep (i, n) {cin>>pvec[i].first>>pvec[i].second;}}
inline void input_pvecm(vp &pvec, ll n) {rep (i, n) {cin>>pvec[i].first>>pvec[i].second;pvec[i].first--,pvec[i].second--;}}
inline void input_pvecd(vpd &pvec, ll n) {rep (i, n) {cin>>pvec[i].first>>pvec[i].second;}}
inline void input_ivec2(vvi &ivec2, int h, int w) {rep(i, h) rep(j, w) {cin>>ivec2[i][j];}}
inline void input_lvec2(vvl &lvec2, ll h, ll w) {rep(i, h) rep(j, w) {cin>>lvec2[i][j];}}
inline void input_lvec2m(vvl &lvec2, ll h, ll w) {rep(i, h) rep(j, w) {cin>>lvec2[i][j];--lvec2[i][j];}}
inline void input_cvec2(vvc &cvec2, ll h, ll w) {rep(i, h) rep(j, w) {cin>>cvec2[i][j];}}
inline bool isin(ll i, ll j, ll h, ll w) {if(i<0||i>=h||j<0||j>=w) return false; else return true;}
template<typename T> inline T TmpPercent(T a, T b) {if(b<0){a=-a,b=-b;} return (a%b+b)%b;}
template<typename T> inline T Percent(T a, T b) {if(b<0) return -TmpPercent(a,b); return TmpPercent(a,b);}
template<typename T> inline T Div(T a, T b) {if(b<0){a=-a,b=-b;} return (a-TmpPercent(a,b))/b; }
template<typename T> inline T Divceil(T a, T b) {if(TmpPercent(a,b)==0) return Div(a,b); return Div(a,b)+1;}
template<typename T> void erase(multiset<T> &st, T x) {if(st.contains(x)) st.erase(st.find(x));}
template<typename T> T pop(vector<T> &x) {T ret=x.back(); x.pop_back(); return ret;}
#ifdef __DEBUG
#define de(var) {cerr << #var << ": "; debug_view(var);}
#define de2(var1,var2) {cerr<<#var1<<' '<<#var2<<": "; debug_view(var1,var2);}
#define de3(var1,var2,var3) {cerr<<#var1<<' '<<#var2<<' '<<#var3<<": "; debug_view(var1,var2,var3);}
#define de4(var1,var2,var3,var4) {cerr<<#var1<<' '<<#var2<<' '<<#var3<<' '<<#var4<<": "; debug_view(var1,var2,var3,var4);}
#define de5(var1,var2,var3,var4,var5) {cerr<<#var1<<' '<<#var2<<' '<<#var3<<' '<<#var4<<' '<<#var5<<": "; debug_view(var1,var2,var3,var4,var5);}
template<typename T> inline void debug_view(T e){cerr << e << endl;}
template<typename T1, typename T2> inline void debug_view(T1 e1, T2 e2){cerr<<e1<<' '<<e2<<endl;}
template<typename T1, typename T2, typename T3> inline void debug_view(T1 e1, T2 e2, T3 e3){cerr<<e1<<' '<<e2<<' '<<e3<<endl;}
template<typename T1, typename T2, typename T3, typename T4> inline void debug_view(T1 e1, T2 e2, T3 e3, T4 e4){cerr<<e1<<' '<<e2<<' '<<e3<<' '<<e4<<endl;}
template<typename T1, typename T2, typename T3, typename T4, typename T5> inline void debug_view(T1 e1, T2 e2, T3 e3, T4 e4, T5 e5){cerr<<e1<<' '<<e2<<' '<<e3<<' '<<e4<<' '<<e5<<endl;}
template<typename T1, typename T2> inline void debug_view(pair<T1,T2> &p){cerr<<"{"<<p.first<<" "<<p.second<<"}\n";}
template<typename T1, typename T2> inline void debug_view(vector<pair<T1,T2>> &v){for(auto [a,b]: v){cerr<<"{"<<a<<" "<<b<<"} ";} cerr << endl;}
template<typename T1, typename T2> inline void debug_view(set<pair<T1,T2>> &s){for(auto [a,b]: s){cerr<<"{"<<a<<" "<<b<<"} ";} cerr << endl;}
template<typename T> inline void debug_view(tuple<T,T,T> t){cerr<<get<0>(t)<<' '<<get<1>(t)<<' '<<get<2>(t)<< endl;}
template<typename T> inline void debug_view(queue<T> q){while(!q.empty()) {cerr << q.front() << " "; q.pop();}cerr << endl;}
template<typename T> inline void debug_view(deque<T> q){while(!q.empty()) {cerr << q.front() << " "; q.pop_front();}cerr << endl;}
template<typename T> inline void debug_view(set<T> s){for(auto x:s){cerr << x << ' ';}cerr << endl;}
template<typename T> inline void debug_view(set<T,greater<T>> s){for(auto x:s){cerr << x << ' ';}cerr << endl;}
template<typename T> inline void debug_view(unordered_set<T> s){for(auto x:s){cerr << x << ' ';}cerr << endl;}
template<typename T> inline void debug_view(multiset<T> s){for(auto x:s){cerr << x << ' ';}cerr << endl;}
template<typename T> inline void debug_view(multiset<T,greater<T>> s){for(auto x:s){cerr << x << ' ';}cerr << endl;}
template<typename T> inline void debug_view(vector<pair<T,T>> &v){for(auto [a,b]: v){cerr<<"{"<<a<<" "<<b<<"} ";} cerr << endl;}
inline void debug_view(vector<string> &v){cerr << "----" << endl; for(auto s: v) debug_view(s);}
template<typename T> inline void debug_view(vector<T> &v){for(auto e: v){cerr << e << " ";} cerr << endl;}
template<typename T> inline void debug_view(vector<vector<pair<T,T>>> &vv){cerr << "----" << endl;for(auto &v: vv){debug_view(v);} cerr << "--------" << endl;}
template<typename T> inline void debug_view(vector<vector<T>> &vv){cerr << "----" << endl;for(auto &v: vv){debug_view(v);} cerr << "--------" << endl;}
template<typename T1,typename T2> inline void debug_view(map<T1,T2> &mp){cerr << "----" << endl;for(auto [k,v]: mp){cerr << k << ' ' << v << endl;} cerr << "--------" << endl;}
template<typename T1,typename T2> inline void debug_view(unordered_map<T1,T2> &mp){cerr << "----" << endl;for(auto [k,v]: mp){cerr << k << ' ' << v << endl;} cerr << "--------" << endl;}
template<typename T1,typename T2> inline void debug_view(map<T1,vector<T2>> &mp){cerr<<"----"<<endl;for(auto [k,v]: mp){cerr<<k<<": ";debug_view(v);} cerr << "--------" << endl;}
template<typename T1,typename T2,typename T3> inline void debug_view(map<pair<T1,T2>,T3> &mp){cerr << "----" << endl;for(auto [p,v]: mp){cerr<<'{'<<p.first<<' '<<p.second<<'}'<<": "<<v<<endl;} cerr<<"--------"<<endl;}
#define deb(var) {cerr << #var << ": "; debugb_view(var);}
template<typename T> inline void debugb_view(T e){bitset<20> b(e); cerr<<b<<endl;}
template<typename T> inline void debugb_view(vector<T> &v){cerr<<"----"<<endl;for(auto e: v){debugb_view(e);}}
#else
#define de(var) {}
#define de2(var1,var2) {}
#define de3(var1,var2,var3) {}
#define de4(var1,var2,var3,var4) {}
#define de5(var1,var2,var3,var4,var5) {}
#define deb(var) {}
#endif
int IINF = 1001001001;
ll INF = 3e18;
const ll M998 = 998244353;
const ll M107 = 1000000007;
template<typename T> inline void ch1(T &x){if(x==INF)x=-1;}
const double PI = acos(-1);
const double EPS = 1e-8;  //eg) if x=1e6, EPS >= 1e6/1e14(=1e-8)
const vi di = {0, 1, 0, -1};
const vi dj = {1, 0, -1, 0};
const vp dij = {{0,1},{1,0},{0,-1},{-1,0}};
const vp hex0 = {{-1,-1},{-1,0},{0,-1},{0,1},{1,-1},{1,0}}; // tobide
const vp hex1 = {{-1,0},{-1,1},{0,-1},{0,1},{1,0},{1,1}};  // hekomi
const vi di8 = {-1, -1, -1, 0, 0, 1, 1, 1};
const vi dj8 = {-1, 0, 1, -1, 1, -1, 0, 1};
const vp dij8 = {{0,1},{1,0},{0,-1},{-1,0},{1,1},{1,-1},{-1,1},{-1,-1}};
Pr operator+ (Pr a, Pr b) {return {a.first+b.first, a.second+b.second};}
Pr operator- (Pr a, Pr b) {return {a.first-b.first, a.second-b.second};}
Pr operator* (Pr a, Pr b) {return {a.first*b.first, a.second*b.second};}
Pr operator/ (Pr a, Pr b) {return {a.first/b.first, a.second/b.second};}

class Sieve {
    long long n;
    vector<long long> sieve;
public:
    Sieve (long long n): n(n), sieve(n+1) {
        for (long long i=2; i<=n; ++i) {
            if (sieve[i] != 0) continue;
            sieve[i] = i;
            for (long long k=i*i; k<=n; k+=i) {
                if (sieve[k] == 0) sieve[k] = i;
            }
        }
    }
    bool is_prime(long long k) {
        if(k>n) assert(0&&"[Error @ class Sieve is_prime] k>n");
        if (k <= 1) return false;
        if (sieve[k] == k) return true;
        return false;
    }
    vector<pair<long long,long long>> factorize(long long k) {
        if(k>n) assert(0&&"[Error @ class Sieve factorize] k>n");
        vector<pair<long long,long long>> ret;
        if (k <= 1) return ret;
        ret.emplace_back(sieve[k], 0);
        while (k != 1) {
            if (ret.back().first == sieve[k]) ++ret.back().second;
            else ret.emplace_back(sieve[k], 1);
            k /= sieve[k];
        }
        return ret;
    }
};

// return minimum index i where a[i] >= x, and its value a[i]
template<typename T>
pair<long long,T> lowbou(vector<T> &a, T x, bool ascending=true) {
    long long n = a.size();
    long long l = -1, r = n;
    while (r - l > 1) {
        long long m = (l + r) / 2;
        if(ascending) {
            if (a[m] >= x) r = m;
            else l = m;
        } else {
            if (a[m] <= x) r = m;
            else l = m;
        }
    }
    if (r != n) return make_pair(r, a[r]);
    else return make_pair(n, T());
}
// return minimum index i where a[i] > x, and its value a[i]
template<typename T>
pair<long long,T> uppbou(vector<T> &a, T x, bool ascending=true) {
    long long n = a.size();
    long long l = -1, r = n;
    while (r - l > 1) {
        long long m = (l + r) / 2;
        if(ascending) {
            if (a[m] > x) r = m;
            else l = m;
        } else {
            if (a[m] < x) r = m;
            else l = m;
        }
    }
    if (r != n) return make_pair(r, a[r]);
    else return make_pair(n, T());
}
// return maximum index i where a[i] <= x, and its value a[i]
template<typename T>
pair<long long,T> lowbou_r(vector<T> &a, T x, bool ascending=true) {
    long long l = -1, r = a.size();
    while (r - l > 1) {
        long long m = (l + r) / 2;
        if(ascending) {
            if (a[m] <= x) l = m;
            else r = m;
        } else {
            if (a[m] >= x) l = m;
            else r = m;
        }
    }
    if (l != -1) return make_pair(l, a[l]);
    else return make_pair(-1, T());
}
// return maximum index i where a[i] < x, and its value a[i]
template<typename T>
pair<long long,T> uppbou_r(vector<T> &a, T x, bool ascending=true) {
    long long l = -1, r = a.size();
    while (r - l > 1) {
        long long m = (l + r) / 2;
        if(ascending) {
            if (a[m] < x) l = m;
            else r = m;
        } else {
            if (a[m] > x) l = m;
            else r = m;
        }
    }
    if (l != -1) return make_pair(l, a[l]);
    else return make_pair(-1, T());
}

vector<long long> separate_digit(long long x, long long base=10, long long sz=-1) {
    vector<long long> ret;
    if(x==0) ret.push_back(0);
    while(x) {
        ret.push_back(x%base);
        x /= base;
    }
    if(sz!=-1) {
        while((long long)ret.size()<sz) ret.push_back(0); // sz桁になるまで上桁を0埋め
        while((long long)ret.size()>sz) ret.pop_back(); // 下sz桁を取り出す
    }
    reverse(ret.begin(), ret.end());
    return ret;
}

long long consolidate_digit(vector<long long> a, long long base=10) {
    long long ret = 0;
    for(auto x: a) {
        ret = ret*base + x;
    }
    return ret;
}

void solve() {
    Sieve sieve(100);
    vl ps;
    for(ll p=2; p<100; ++p) { if(sieve.is_prime(p)) ps.push_back(p); }
    ll M = ps.size();
    ll Mx = 9e18;

    vp cand;
    uset<sll> mem;
    auto dfs=[&](auto f, ll i, vl pow, sll x=1) -> void {
        if(x>Mx) return;
        if(!mem.count(x)) {
            ll cnt = 1;
            rep(j, M) cnt *= pow[j]+1;
            cand.emplace_back(x, cnt);
            mem.insert(x);
        }
        if(i==M) return;

        if(i==0 || pow[i-1]>pow[i]) {
            vl npow = pow;
            npow[i]++;
            f(f, i, npow, x*ps[i]);
        }
        if(pow[i]>0) f(f, i+1, pow, x);
    };
    vl pow(M);
    dfs(dfs, 0, pow);
    sort(all(cand));
    vp pcand; swap(pcand, cand);
    ll mxcnt = 0;
    for(auto [n,cnt]: pcand) {
        if(cnt<=mxcnt) continue;
        cand.emplace_back(n,cnt);
        mxcnt = cnt;
    }
    ll K = cand.size();
    de(cand)
    rep(i, K) {
        auto [n,cnt] = cand[i];
        auto v = separate_digit(n);
        printf("%3lld: N=%19lld, len=%2lld, cnt=%6lld\n", i+1, n, SIZE(v), cnt);
    }
}

int main () {
    // ios::sync_with_stdio(false);
    cin.tie(nullptr);
    solve();
}
