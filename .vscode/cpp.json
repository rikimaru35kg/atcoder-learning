{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Snippet(Combination)": {
		"prefix": "comb",
		"body": [
			"//! Only when <= 1e6",
			"//! If not, use Combination2 class below.",
			"class Combination {",
			"    long long mx, mod;",
			"    vector<long long> facts, ifacts;",
			"public:",
			"    // argument mod must be a prime number!!",
			"    Combination(long long mx, long long mod): mx(mx), mod(mod), facts(mx+1), ifacts(mx+1) {",
			"        facts[0] = 1;",
			"        for (long long i=1; i<=mx; ++i) facts[i] = facts[i-1] * i % mod;",
			"        ifacts[mx] = modpow(facts[mx], mod-2);",
			"        for (long long i=mx-1; i>=0; --i) ifacts[i] = ifacts[i+1] * (i+1) % mod;",
			"    }",
			"    long long operator()(long long n, long long r) {",
			"        if (r < 0 || r > n || n < 0 || n > mx) return 0;",
			"        return facts[n] * ifacts[r] % mod * ifacts[n-r] % mod;",
			"    }",
			"    long long nPr(long long n, long long r) {",
			"        if (r < 0 || r > n || n < 0 || n > mx) return 0;",
			"        return facts[n] * ifacts[n-r] % mod;",
			"    }",
			"    long long get_fact(long long n) {",
			"        if (n > mx) return 0;",
			"        return facts[n];",
			"    }",
			"    long long get_factinv(long long n) {",
			"        if (n > mx) return 0;",
			"        return ifacts[n];",
			"    }",
			"    long long modpow(long long a, long long b) {",
			"        if (b == 0) return 1;",
			"        a %= mod;",
			"        long long child = modpow(a, b/2);",
			"        if (b % 2 == 0) return child * child % mod;",
			"        else return a * child % mod * child % mod;",
			"    }",
			"};",
		]

	}
}